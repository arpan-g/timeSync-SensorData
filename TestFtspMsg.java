/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'TestFtspMsg'
 * message type.
 */

public class TestFtspMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 27;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 137;

    /** Create a new TestFtspMsg of size 27. */
    public TestFtspMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new TestFtspMsg of the given data_length. */
    public TestFtspMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestFtspMsg with the given data_length
     * and base offset.
     */
    public TestFtspMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestFtspMsg using the given byte array
     * as backing store.
     */
    public TestFtspMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestFtspMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public TestFtspMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestFtspMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public TestFtspMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestFtspMsg embedded in the given message
     * at the given base offset.
     */
    public TestFtspMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TestFtspMsg embedded in the given message
     * at the given base offset and length.
     */
    public TestFtspMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <TestFtspMsg> \n";
      try {
        s += "  [src_addr=0x"+Long.toHexString(get_src_addr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [counter=0x"+Long.toHexString(get_counter())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [local_rx_timestamp=0x"+Long.toHexString(get_local_rx_timestamp())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [global_rx_timestamp=0x"+Long.toHexString(get_global_rx_timestamp())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [skew_times_1000000=0x"+Long.toHexString(get_skew_times_1000000())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [is_synced=0x"+Long.toHexString(get_is_synced())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [ftsp_root_addr=0x"+Long.toHexString(get_ftsp_root_addr())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [ftsp_seq=0x"+Long.toHexString(get_ftsp_seq())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [ftsp_table_entries=0x"+Long.toHexString(get_ftsp_table_entries())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [lightSensor=0x"+Long.toHexString(get_lightSensor())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [tempSensor=0x"+Long.toHexString(get_tempSensor())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [micSensor=0x"+Long.toHexString(get_micSensor())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: src_addr
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'src_addr' is signed (false).
     */
    public static boolean isSigned_src_addr() {
        return false;
    }

    /**
     * Return whether the field 'src_addr' is an array (false).
     */
    public static boolean isArray_src_addr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'src_addr'
     */
    public static int offset_src_addr() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'src_addr'
     */
    public static int offsetBits_src_addr() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'src_addr'
     */
    public int get_src_addr() {
        return (int)getUIntBEElement(offsetBits_src_addr(), 16);
    }

    /**
     * Set the value of the field 'src_addr'
     */
    public void set_src_addr(int value) {
        setUIntBEElement(offsetBits_src_addr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'src_addr'
     */
    public static int size_src_addr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'src_addr'
     */
    public static int sizeBits_src_addr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: counter
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'counter' is signed (false).
     */
    public static boolean isSigned_counter() {
        return false;
    }

    /**
     * Return whether the field 'counter' is an array (false).
     */
    public static boolean isArray_counter() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'counter'
     */
    public static int offset_counter() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'counter'
     */
    public static int offsetBits_counter() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'counter'
     */
    public int get_counter() {
        return (int)getUIntBEElement(offsetBits_counter(), 16);
    }

    /**
     * Set the value of the field 'counter'
     */
    public void set_counter(int value) {
        setUIntBEElement(offsetBits_counter(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'counter'
     */
    public static int size_counter() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'counter'
     */
    public static int sizeBits_counter() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: local_rx_timestamp
    //   Field type: long, unsigned
    //   Offset (bits): 32
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'local_rx_timestamp' is signed (false).
     */
    public static boolean isSigned_local_rx_timestamp() {
        return false;
    }

    /**
     * Return whether the field 'local_rx_timestamp' is an array (false).
     */
    public static boolean isArray_local_rx_timestamp() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'local_rx_timestamp'
     */
    public static int offset_local_rx_timestamp() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'local_rx_timestamp'
     */
    public static int offsetBits_local_rx_timestamp() {
        return 32;
    }

    /**
     * Return the value (as a long) of the field 'local_rx_timestamp'
     */
    public long get_local_rx_timestamp() {
        return (long)getUIntBEElement(offsetBits_local_rx_timestamp(), 32);
    }

    /**
     * Set the value of the field 'local_rx_timestamp'
     */
    public void set_local_rx_timestamp(long value) {
        setUIntBEElement(offsetBits_local_rx_timestamp(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'local_rx_timestamp'
     */
    public static int size_local_rx_timestamp() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'local_rx_timestamp'
     */
    public static int sizeBits_local_rx_timestamp() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: global_rx_timestamp
    //   Field type: long, unsigned
    //   Offset (bits): 64
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'global_rx_timestamp' is signed (false).
     */
    public static boolean isSigned_global_rx_timestamp() {
        return false;
    }

    /**
     * Return whether the field 'global_rx_timestamp' is an array (false).
     */
    public static boolean isArray_global_rx_timestamp() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'global_rx_timestamp'
     */
    public static int offset_global_rx_timestamp() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'global_rx_timestamp'
     */
    public static int offsetBits_global_rx_timestamp() {
        return 64;
    }

    /**
     * Return the value (as a long) of the field 'global_rx_timestamp'
     */
    public long get_global_rx_timestamp() {
        return (long)getUIntBEElement(offsetBits_global_rx_timestamp(), 32);
    }

    /**
     * Set the value of the field 'global_rx_timestamp'
     */
    public void set_global_rx_timestamp(long value) {
        setUIntBEElement(offsetBits_global_rx_timestamp(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'global_rx_timestamp'
     */
    public static int size_global_rx_timestamp() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'global_rx_timestamp'
     */
    public static int sizeBits_global_rx_timestamp() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: skew_times_1000000
    //   Field type: int, unsigned
    //   Offset (bits): 96
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'skew_times_1000000' is signed (false).
     */
    public static boolean isSigned_skew_times_1000000() {
        return false;
    }

    /**
     * Return whether the field 'skew_times_1000000' is an array (false).
     */
    public static boolean isArray_skew_times_1000000() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'skew_times_1000000'
     */
    public static int offset_skew_times_1000000() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'skew_times_1000000'
     */
    public static int offsetBits_skew_times_1000000() {
        return 96;
    }

    /**
     * Return the value (as a int) of the field 'skew_times_1000000'
     */
    public int get_skew_times_1000000() {
        return (int)getSIntBEElement(offsetBits_skew_times_1000000(), 32);
    }

    /**
     * Set the value of the field 'skew_times_1000000'
     */
    public void set_skew_times_1000000(int value) {
        setSIntBEElement(offsetBits_skew_times_1000000(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'skew_times_1000000'
     */
    public static int size_skew_times_1000000() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'skew_times_1000000'
     */
    public static int sizeBits_skew_times_1000000() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: is_synced
    //   Field type: short, unsigned
    //   Offset (bits): 128
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'is_synced' is signed (false).
     */
    public static boolean isSigned_is_synced() {
        return false;
    }

    /**
     * Return whether the field 'is_synced' is an array (false).
     */
    public static boolean isArray_is_synced() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'is_synced'
     */
    public static int offset_is_synced() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'is_synced'
     */
    public static int offsetBits_is_synced() {
        return 128;
    }

    /**
     * Return the value (as a short) of the field 'is_synced'
     */
    public short get_is_synced() {
        return (short)getUIntBEElement(offsetBits_is_synced(), 8);
    }

    /**
     * Set the value of the field 'is_synced'
     */
    public void set_is_synced(short value) {
        setUIntBEElement(offsetBits_is_synced(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'is_synced'
     */
    public static int size_is_synced() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'is_synced'
     */
    public static int sizeBits_is_synced() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: ftsp_root_addr
    //   Field type: int, unsigned
    //   Offset (bits): 136
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'ftsp_root_addr' is signed (false).
     */
    public static boolean isSigned_ftsp_root_addr() {
        return false;
    }

    /**
     * Return whether the field 'ftsp_root_addr' is an array (false).
     */
    public static boolean isArray_ftsp_root_addr() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'ftsp_root_addr'
     */
    public static int offset_ftsp_root_addr() {
        return (136 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'ftsp_root_addr'
     */
    public static int offsetBits_ftsp_root_addr() {
        return 136;
    }

    /**
     * Return the value (as a int) of the field 'ftsp_root_addr'
     */
    public int get_ftsp_root_addr() {
        return (int)getUIntBEElement(offsetBits_ftsp_root_addr(), 16);
    }

    /**
     * Set the value of the field 'ftsp_root_addr'
     */
    public void set_ftsp_root_addr(int value) {
        setUIntBEElement(offsetBits_ftsp_root_addr(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'ftsp_root_addr'
     */
    public static int size_ftsp_root_addr() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'ftsp_root_addr'
     */
    public static int sizeBits_ftsp_root_addr() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: ftsp_seq
    //   Field type: short, unsigned
    //   Offset (bits): 152
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'ftsp_seq' is signed (false).
     */
    public static boolean isSigned_ftsp_seq() {
        return false;
    }

    /**
     * Return whether the field 'ftsp_seq' is an array (false).
     */
    public static boolean isArray_ftsp_seq() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'ftsp_seq'
     */
    public static int offset_ftsp_seq() {
        return (152 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'ftsp_seq'
     */
    public static int offsetBits_ftsp_seq() {
        return 152;
    }

    /**
     * Return the value (as a short) of the field 'ftsp_seq'
     */
    public short get_ftsp_seq() {
        return (short)getUIntBEElement(offsetBits_ftsp_seq(), 8);
    }

    /**
     * Set the value of the field 'ftsp_seq'
     */
    public void set_ftsp_seq(short value) {
        setUIntBEElement(offsetBits_ftsp_seq(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'ftsp_seq'
     */
    public static int size_ftsp_seq() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'ftsp_seq'
     */
    public static int sizeBits_ftsp_seq() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: ftsp_table_entries
    //   Field type: short, unsigned
    //   Offset (bits): 160
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'ftsp_table_entries' is signed (false).
     */
    public static boolean isSigned_ftsp_table_entries() {
        return false;
    }

    /**
     * Return whether the field 'ftsp_table_entries' is an array (false).
     */
    public static boolean isArray_ftsp_table_entries() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'ftsp_table_entries'
     */
    public static int offset_ftsp_table_entries() {
        return (160 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'ftsp_table_entries'
     */
    public static int offsetBits_ftsp_table_entries() {
        return 160;
    }

    /**
     * Return the value (as a short) of the field 'ftsp_table_entries'
     */
    public short get_ftsp_table_entries() {
        return (short)getUIntBEElement(offsetBits_ftsp_table_entries(), 8);
    }

    /**
     * Set the value of the field 'ftsp_table_entries'
     */
    public void set_ftsp_table_entries(short value) {
        setUIntBEElement(offsetBits_ftsp_table_entries(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'ftsp_table_entries'
     */
    public static int size_ftsp_table_entries() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'ftsp_table_entries'
     */
    public static int sizeBits_ftsp_table_entries() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: lightSensor
    //   Field type: int, unsigned
    //   Offset (bits): 168
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'lightSensor' is signed (false).
     */
    public static boolean isSigned_lightSensor() {
        return false;
    }

    /**
     * Return whether the field 'lightSensor' is an array (false).
     */
    public static boolean isArray_lightSensor() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'lightSensor'
     */
    public static int offset_lightSensor() {
        return (168 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'lightSensor'
     */
    public static int offsetBits_lightSensor() {
        return 168;
    }

    /**
     * Return the value (as a int) of the field 'lightSensor'
     */
    public int get_lightSensor() {
        return (int)getUIntBEElement(offsetBits_lightSensor(), 16);
    }

    /**
     * Set the value of the field 'lightSensor'
     */
    public void set_lightSensor(int value) {
        setUIntBEElement(offsetBits_lightSensor(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'lightSensor'
     */
    public static int size_lightSensor() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'lightSensor'
     */
    public static int sizeBits_lightSensor() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: tempSensor
    //   Field type: int, unsigned
    //   Offset (bits): 184
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'tempSensor' is signed (false).
     */
    public static boolean isSigned_tempSensor() {
        return false;
    }

    /**
     * Return whether the field 'tempSensor' is an array (false).
     */
    public static boolean isArray_tempSensor() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'tempSensor'
     */
    public static int offset_tempSensor() {
        return (184 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'tempSensor'
     */
    public static int offsetBits_tempSensor() {
        return 184;
    }

    /**
     * Return the value (as a int) of the field 'tempSensor'
     */
    public int get_tempSensor() {
        return (int)getUIntBEElement(offsetBits_tempSensor(), 16);
    }

    /**
     * Set the value of the field 'tempSensor'
     */
    public void set_tempSensor(int value) {
        setUIntBEElement(offsetBits_tempSensor(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'tempSensor'
     */
    public static int size_tempSensor() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'tempSensor'
     */
    public static int sizeBits_tempSensor() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: micSensor
    //   Field type: int, unsigned
    //   Offset (bits): 200
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'micSensor' is signed (false).
     */
    public static boolean isSigned_micSensor() {
        return false;
    }

    /**
     * Return whether the field 'micSensor' is an array (false).
     */
    public static boolean isArray_micSensor() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'micSensor'
     */
    public static int offset_micSensor() {
        return (200 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'micSensor'
     */
    public static int offsetBits_micSensor() {
        return 200;
    }

    /**
     * Return the value (as a int) of the field 'micSensor'
     */
    public int get_micSensor() {
        return (int)getUIntBEElement(offsetBits_micSensor(), 16);
    }

    /**
     * Set the value of the field 'micSensor'
     */
    public void set_micSensor(int value) {
        setUIntBEElement(offsetBits_micSensor(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'micSensor'
     */
    public static int size_micSensor() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'micSensor'
     */
    public static int sizeBits_micSensor() {
        return 16;
    }

}
